//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/__Game/InputActions/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""OnFeet"",
            ""id"": ""a028c224-2871-4991-8ae5-e728be6e5570"",
            ""actions"": [
                {
                    ""name"": ""LeftAttack"",
                    ""type"": ""Button"",
                    ""id"": ""271deb47-323e-4966-9a54-2ef49fc9cbfc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightAttack"",
                    ""type"": ""Button"",
                    ""id"": ""3de68d07-fde2-46f3-bc40-3981f005ac66"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""984d990a-165e-48ee-b45f-6c5dd236daa4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60bab144-5a0b-471f-922e-65f261a873b2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Navigation"",
            ""id"": ""a8347d14-175d-4985-b62b-52c41bc854d3"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""6b5a6e47-40e5-4cfc-9e98-5d60fd3344e4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c8e073df-e7a1-41ba-afb9-ff4c1cab809e"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // OnFeet
        m_OnFeet = asset.FindActionMap("OnFeet", throwIfNotFound: true);
        m_OnFeet_LeftAttack = m_OnFeet.FindAction("LeftAttack", throwIfNotFound: true);
        m_OnFeet_RightAttack = m_OnFeet.FindAction("RightAttack", throwIfNotFound: true);
        // Navigation
        m_Navigation = asset.FindActionMap("Navigation", throwIfNotFound: true);
        m_Navigation_Pause = m_Navigation.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // OnFeet
    private readonly InputActionMap m_OnFeet;
    private List<IOnFeetActions> m_OnFeetActionsCallbackInterfaces = new List<IOnFeetActions>();
    private readonly InputAction m_OnFeet_LeftAttack;
    private readonly InputAction m_OnFeet_RightAttack;
    public struct OnFeetActions
    {
        private @PlayerInputActions m_Wrapper;
        public OnFeetActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftAttack => m_Wrapper.m_OnFeet_LeftAttack;
        public InputAction @RightAttack => m_Wrapper.m_OnFeet_RightAttack;
        public InputActionMap Get() { return m_Wrapper.m_OnFeet; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OnFeetActions set) { return set.Get(); }
        public void AddCallbacks(IOnFeetActions instance)
        {
            if (instance == null || m_Wrapper.m_OnFeetActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OnFeetActionsCallbackInterfaces.Add(instance);
            @LeftAttack.started += instance.OnLeftAttack;
            @LeftAttack.performed += instance.OnLeftAttack;
            @LeftAttack.canceled += instance.OnLeftAttack;
            @RightAttack.started += instance.OnRightAttack;
            @RightAttack.performed += instance.OnRightAttack;
            @RightAttack.canceled += instance.OnRightAttack;
        }

        private void UnregisterCallbacks(IOnFeetActions instance)
        {
            @LeftAttack.started -= instance.OnLeftAttack;
            @LeftAttack.performed -= instance.OnLeftAttack;
            @LeftAttack.canceled -= instance.OnLeftAttack;
            @RightAttack.started -= instance.OnRightAttack;
            @RightAttack.performed -= instance.OnRightAttack;
            @RightAttack.canceled -= instance.OnRightAttack;
        }

        public void RemoveCallbacks(IOnFeetActions instance)
        {
            if (m_Wrapper.m_OnFeetActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOnFeetActions instance)
        {
            foreach (var item in m_Wrapper.m_OnFeetActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OnFeetActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OnFeetActions @OnFeet => new OnFeetActions(this);

    // Navigation
    private readonly InputActionMap m_Navigation;
    private List<INavigationActions> m_NavigationActionsCallbackInterfaces = new List<INavigationActions>();
    private readonly InputAction m_Navigation_Pause;
    public struct NavigationActions
    {
        private @PlayerInputActions m_Wrapper;
        public NavigationActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_Navigation_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Navigation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NavigationActions set) { return set.Get(); }
        public void AddCallbacks(INavigationActions instance)
        {
            if (instance == null || m_Wrapper.m_NavigationActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NavigationActionsCallbackInterfaces.Add(instance);
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(INavigationActions instance)
        {
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(INavigationActions instance)
        {
            if (m_Wrapper.m_NavigationActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INavigationActions instance)
        {
            foreach (var item in m_Wrapper.m_NavigationActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NavigationActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NavigationActions @Navigation => new NavigationActions(this);
    public interface IOnFeetActions
    {
        void OnLeftAttack(InputAction.CallbackContext context);
        void OnRightAttack(InputAction.CallbackContext context);
    }
    public interface INavigationActions
    {
        void OnPause(InputAction.CallbackContext context);
    }
}
